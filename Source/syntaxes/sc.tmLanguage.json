{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Socordia",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#primitives"
    },
    {
      "include": "#literals"
    },
    {
      "include": "#numerics"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#annotations"
    },
    {
      "include": "#identifiers"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#char"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "begin": "//",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.sc"
            }
          },
          "end": "$",
          "name": "comment.line.double-slash.sc"
        },
        {
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.sc"
            }
          },
          "end": "\\*/",
          "name": "comment.line.block.sc"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.other.sc",
          "match": "\\b(inline|this|throw|catch|in|continue|return|where|type|unit|mut|import|module|using|as|struct|class|interface|let|prop|get|set|implement|of|for|switch|case|break|when|if|else|match|with|while|static|operator|private|protected|public|internal|abstract|override|func|macro|constructor|destructor|enum|union|bitfield|default|sizeof|and|or)\\b"
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "name": "constant.language.sc",
          "match": "\\b(true|false|none|nameof|default)\\b"
        }
      ]
    },
    "numerics": {
      "patterns": [
        {
          "name": "constant.numeric.sc",
          "match": "\\b([0-9]+)\\b"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.sc",
          "match": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.sc",
          "match": "\\b(and|or)\\b"
        }
      ]
    },
    "primitives": {
      "patterns": [
        {
          "name": "keyword.control.sc",
          "match": "\\b(obj|u8|u16|u32|i32|i8|i16|i32|i64|f32|f64|f16|fraction|bool|string|char|SELF)\\b"
        }
      ]
    },
    "annotations": {
      "patterns": [
        {
          "name": "storage.type.sc",
          "match": "@\\w*(\\([^)]*\\))?"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.sc",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.sc",
          "match": "\\\\."
        }
      ]
    },
    "char": {
      "name": "string.quoted.single.sc",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.sc",
          "match": "\\\\."
        }
      ]
    }
  },
  "scopeName": "source.sc"
}
